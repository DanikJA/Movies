{"version":3,"file":"static/js/597.4358c979.chunk.js","mappings":"wNA0DA,UAlDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAqBtB,OAnBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEKC,EAAAA,EAAAA,IAAU,GAADC,OAVvB,+BAWI,WAAAA,OAAUvB,EAAO,YAC5B,CACEwB,OAAQ,CACNC,QAhBE,sCAmBN,KAAD,EAPKP,EAAQC,EAAAO,KAQdnB,EAAQW,EAASS,KAAKrB,MAAMa,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAE5BR,EAAS,wBAAwB,yBAAAQ,EAAAU,OAAA,GAAAZ,EAAA,kBAEpC,kBAdkB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAenBlB,GACF,GAAG,CAACb,IACJgC,QAAQC,IAAI3B,GACRI,GACKwB,EAAAA,EAAAA,KAAA,OAAAC,SAAMzB,KAIb0B,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,UACJD,EAAAA,EAAAA,KAAA,MAAAC,SACG7B,EAAK+B,KAAI,SAAAC,GAAK,OACbF,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACGG,EAAMC,eACLL,EAAAA,EAAAA,KAAA,OACEM,IAAG,GAAAjB,OAvCI,mCAuCeA,OAAGe,EAAMC,cAC/BE,IAAKH,EAAMI,KACXC,MAAO,QAGXT,EAAAA,EAAAA,KAAA,KAAAC,SAAIG,EAAMI,QACVN,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,cAAYG,EAAMM,eATdN,EAAMO,GAUV,QAKf,C","sources":["components/Cast.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nconst API_KEY = 'a4e0e6c94492c515df52f4a6ebcc54c7';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCastData = async () => {\n      try {\n        const response = await axios.get(\n          `${BASE_URL}/movie/${movieId}/credits`,\n          {\n            params: {\n              api_key: API_KEY,\n            },\n          }\n        );\n        setCast(response.data.cast);\n      } catch (error) {\n        setError('Failed to fetch cast');\n      }\n    };\n    fetchCastData();\n  }, [movieId]);\n  console.log(cast);\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.id}>\n            {actor.profile_path && (\n              <img\n                src={`${IMAGE_BASE_URL}${actor.profile_path}`}\n                alt={actor.name}\n                width={'70'}\n              />\n            )}\n            <p>{actor.name}</p>\n            <p>Character: {actor.character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","error","setError","useEffect","fetchCastData","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","concat","params","api_key","sent","data","t0","stop","apply","arguments","console","log","_jsx","children","_jsxs","map","actor","profile_path","src","alt","name","width","character","id"],"sourceRoot":""}